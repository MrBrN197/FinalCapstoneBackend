require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  let(:valid_attributes) { { username: 'username' } }

  let(:invalid_attributes) { { username: '' } }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) { {} }

  describe 'GET /index' do
    it 'renders a successful response' do
      get api_users_url, headers: valid_headers, as: :json
      # TODO: check returned json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.create! valid_attributes
      get api_user_url(user), as: :json
      # TODO: check returned json
      expect(response).to be_successful
    end
  end

  describe 'POST /sign_up' do
    context 'with valid parameters' do
      let(:create_attributes) { { username: 'mikel' } }
      it 'renders a successful response' do
        post '/sign_up', params: create_attributes, as: :json
        expect(response).to be_successful
      end
      it 'increases User\'s count by 1' do
        expect { post '/sign_up', params: create_attributes, as: :json }.to change(User, :count).by(1)
      end
    end
    context 'with invalid parameters' do
      let(:invalid_create_attributes) { { name: 'mikel' } }
      it 'doesn\'t create a new user without a username' do
        post '/sign_up', params: { username: '' }, as: :json
        expect(response).to have_http_status 500
      end
    end
  end
end
